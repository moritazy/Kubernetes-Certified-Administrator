IMAGE_NAME = "anisa-cka/ubuntu-base"
N = 1

# Configure Shecan Proxy
$setdns = <<-SCRIPT
useradd -m -s /bin/bash -U anisa
echo 'anisa:qazwsx' | chpasswd
echo 'anisa ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/anisa
set -e
cat <<EOF | tee /etc/systemd/resolved.conf
[Resolve]
DNS=178.22.122.100 185.51.200.2
EOF
service systemd-resolved restart
SCRIPT

# Install Docker
$docker = <<-SCRIPT
apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
echo 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable' > /etc/apt/sources.list.d/docker.list
apt-get update
apt-get install -y docker-ce=5:19.03.15~3-0~ubuntu-focal docker-ce-cli=5:19.03.15~3-0~ubuntu-focal containerd.io
SCRIPT

# Install Kubernetes dependencies
$dependencies = <<-SCRIPT
# Install kubernetes
apt-get update && sudo apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF | tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -y kubelet=1.18.15-00 kubeadm=1.18.15-00 kubectl=1.18.15-00
sudo apt-mark hold kubelet kubeadm kubectl
sudo apt-get install -y nfs-common
SCRIPT

# Configure system requirements
$configurations = <<-SCRIPT
set -e
#Letting iptables see bridged traffic
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

# kubelet requires swap off
swapoff -a
# keep swap off after reboot
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
set -e
SCRIPT

# Initialize Master Node
$initialize = <<-SCRIPT
kubeadm config images pull --kubernetes-version=v1.18.0
kubeadm init --apiserver-cert-extra-sans=127.0.0.1,localhost,192.168.50.10 --kubernetes-version=v1.18.0 --apiserver-advertise-address="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16
# Set up admin creds for the vagrant user
echo Copying credentials to /home/vagrant...
sudo mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config
chown $(id -u vagrant):$(id -g vagrant) /root/.kube/config
cp /etc/kubernetes/admin.conf /vagrant/

#Install Calico CNI
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl taint nodes --all node-role.kubernetes.io/master-

token=`kubeadm token generate`
kubeadm token create $token --print-join-command | grep kubeadm | tee -a /vagrant/join.sh
SCRIPT

# Join Slave Nodes
$join = <<-SCRIPT
bash /vagrant/join.sh
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
    v.cpus = 2
  end

  config.vm.define "master-1" do |master|
      master.vm.box = IMAGE_NAME
      master.vm.network "private_network", ip: "192.168.50.10"
      master.vm.network "forwarded_port", guest: 6443, host: 6443
      master.vm.hostname = "master-1"
      master.vm.provision "shell", inline: $setdns
      master.vm.provision "shell", inline: $docker
      master.vm.provision "shell", inline: $dependencies
      master.vm.provision "shell", inline: $configurations
      master.vm.provision "shell", inline: $initialize
  end

  (1..N).each do |i|
    config.vm.define "node-#{i}" do |node|
        node.vm.box = IMAGE_NAME
        node.vm.network "private_network", ip: "192.168.50.#{i + 10}"
        node.vm.hostname = "node-#{i}"
        node.vm.provision "shell", inline: $setdns
        node.vm.provision "shell", inline: $docker
        node.vm.provision "shell", inline: $dependencies
        node.vm.provision "shell", inline: $configurations
        node.vm.provision "shell", inline: $join

    end
  end

end
